package braintwist;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;

/*
 * PolygonsApp.java
 *
 * This application illustrates (multiple) interface inheritance and
 * virtuality by means of a simple interface hierarchy consisting of
 * a base interface IPolygon (inheriting from the Comparable interface),
 * direct descendant interfaces IRectangle and IRhombus, and interface ISquare
 * that inherits from both IRectangle and IRhombus.
 * Each interface is implemented by a corresponding concrete class
 * (CPolygon, CRectangle, CRhombus, CSquare).
 * The application maintains an array list of IPolygon references
 * and draws the corresponding polygons using only the information
 * obtainable through this interface.
 */

/**
 *
 * @author G.Zwaan / C.Hemerik / lanzaa
 */

public class PolygonsApp extends javax.swing.JFrame {
    private Puzzle model;


    /** Creates new form FiguresApp */
    public PolygonsApp() {
        initComponents();

        // manually added initialization code
        initAddedComponents();

        updateViews();
        updateModelDisplay();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayPanel = new javax.swing.JPanel();
        controlInfoPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        clearButton = new javax.swing.JButton();
        newListButton = new javax.swing.JButton();
        display = new javax.swing.JButton();
        rot0b = new javax.swing.JButton();
        rot1b = new javax.swing.JButton();
        rot2b = new javax.swing.JButton();
        rot3b = new javax.swing.JButton();
        rot4b = new javax.swing.JButton();
        rot5b = new javax.swing.JButton();
        rot7b = new javax.swing.JButton();
        rot6b = new javax.swing.JButton();
        randomB = new javax.swing.JButton();
        sRandomB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayPanel.setLayout(new java.awt.BorderLayout());

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        newListButton.setText("Refresh Model");
        newListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newListButtonActionPerformed(evt);
            }
        });

        display.setText("solve");
        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

        rot0b.setText("0");
        rot0b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot0bActionPerformed(evt);
            }
        });

        rot1b.setText("1");
        rot1b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot1bActionPerformed(evt);
            }
        });

        rot2b.setText("2");
        rot2b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot2bActionPerformed(evt);
            }
        });

        rot3b.setText("3");
        rot3b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot3bActionPerformed(evt);
            }
        });

        rot4b.setText("4");
        rot4b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot4bActionPerformed(evt);
            }
        });

        rot5b.setText("5");
        rot5b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot5bActionPerformed(evt);
            }
        });

        rot7b.setText("7");
        rot7b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot7bActionPerformed(evt);
            }
        });

        rot6b.setText("6");
        rot6b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot6bActionPerformed(evt);
            }
        });

        randomB.setText("Random");
        randomB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomBActionPerformed(evt);
            }
        });

        sRandomB.setText("Super Random");
        sRandomB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sRandomBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap(147, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                            .addComponent(newListButton)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                            .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(buttonPanelLayout.createSequentialGroup()
                                    .addComponent(rot7b)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                    .addComponent(rot6b))
                                .addGroup(buttonPanelLayout.createSequentialGroup()
                                    .addComponent(rot1b)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rot2b)))
                            .addGap(21, 21, 21)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                        .addComponent(clearButton)
                        .addGap(18, 18, 18)
                        .addComponent(display)
                        .addContainerGap())))
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sRandomB, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(randomB, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rot0b)
                            .addComponent(rot3b))
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rot5b)
                            .addComponent(rot4b))
                        .addGap(58, 58, 58))))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newListButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rot3b)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rot0b)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rot1b)
                            .addComponent(rot2b))
                        .addGap(18, 18, 18)
                        .addComponent(rot4b)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rot5b)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rot6b)
                            .addComponent(rot7b)))
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(randomB)
                        .addGap(85, 85, 85)
                        .addComponent(sRandomB)))
                .addGap(44, 44, 44)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(display)
                    .addComponent(clearButton))
                .addContainerGap(132, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout controlInfoPanelLayout = new javax.swing.GroupLayout(controlInfoPanel);
        controlInfoPanel.setLayout(controlInfoPanelLayout);
        controlInfoPanelLayout.setHorizontalGroup(
            controlInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controlInfoPanelLayout.setVerticalGroup(
            controlInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlInfoPanelLayout.createSequentialGroup()
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(187, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(controlInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        polygonList.clear();

        updateViews();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void newListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newListButtonActionPerformed
        updateModelDisplay();
    }//GEN-LAST:event_newListButtonActionPerformed

    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed
        // TODO add your handling code here:
        model.solver();
        updateModelDisplay();
    }//GEN-LAST:event_displayActionPerformed

    private void rot0bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot0bActionPerformed
        model.rotateCW(Puzzle.tri[0]);
        updateModelDisplay();
    }//GEN-LAST:event_rot0bActionPerformed

    private void rot1bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot1bActionPerformed
        model.rotateCW(Puzzle.tri[1]);
        updateModelDisplay();
    }//GEN-LAST:event_rot1bActionPerformed

    private void rot2bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot2bActionPerformed
        model.rotateCW(Puzzle.tri[2]);
        updateModelDisplay();
    }//GEN-LAST:event_rot2bActionPerformed

    private void rot3bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot3bActionPerformed
        model.rotateCW(Puzzle.tri[3]);
        updateModelDisplay();
    }//GEN-LAST:event_rot3bActionPerformed

    private void rot4bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot4bActionPerformed
        model.rotateCW(Puzzle.tri[4]);
        updateModelDisplay();
    }//GEN-LAST:event_rot4bActionPerformed

    private void rot5bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot5bActionPerformed
 model.rotateCW(Puzzle.tri[5]);
        updateModelDisplay();
    }//GEN-LAST:event_rot5bActionPerformed

    private void rot7bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot7bActionPerformed
 model.rotateCW(Puzzle.tri[7]);
        updateModelDisplay();
    }//GEN-LAST:event_rot7bActionPerformed

    private void rot6bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot6bActionPerformed
 model.rotateCW(Puzzle.tri[6]);
        updateModelDisplay();
    }//GEN-LAST:event_rot6bActionPerformed

    private void randomBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int a = random.nextInt(8);
        model.rotateCW(Puzzle.tri[a]);
        updateModelDisplay();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void sRandomBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sRandomBActionPerformed
        for (int i = 0; i < 50; i++ ) {
            model.rotateCW(Puzzle.tri[random.nextInt(8)]);
        }
        updateModelDisplay();
    }//GEN-LAST:event_sRandomBActionPerformed

    private void updateModelDisplay() {
        polygonList.clear();
        addRotButtons();
        for (IPolygon c : model.getTriangles()) {
            polygonList.add(c);
        }

        updateViews();
    }

    private void addRotButtons() {
        //TODO
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PolygonsApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel controlInfoPanel;
    private javax.swing.JButton display;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JButton newListButton;
    private javax.swing.JButton randomB;
    private javax.swing.JButton rot0b;
    private javax.swing.JButton rot1b;
    private javax.swing.JButton rot2b;
    private javax.swing.JButton rot3b;
    private javax.swing.JButton rot4b;
    private javax.swing.JButton rot5b;
    private javax.swing.JButton rot6b;
    private javax.swing.JButton rot7b;
    private javax.swing.JButton sRandomB;
    // End of variables declaration//GEN-END:variables

    // private inner class DrawingPanel for drawing the polygons
    // (all polygons, selected polygon (if any))
    // and selecting a polygon by mouse click
    // (class has access to all manually added fields in class PolygonsApp)
    private class DrawingPanel extends JPanel implements MouseListener {

        public DrawingPanel(){
            this.setBackground(Color.white); // set the background color to white
            this.addMouseListener(this);     // a DrawingPanel listens to all
                                             // mouse events occurring in it
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);

            // draw all figures in polygonList from end of list to start of list,
            // each with a black border line and a yellow interior
            for (int i = polygonList.size() - 1; 0<= i; i--){
                IPolygon polygon = polygonList.get(i);

                if (polygon != null) {
                    drawPolygon(g,polygon,Color.black,polygon.getColor(),
                                String.valueOf(i));
                }
            }
        }
        
        // implementing all methods from the MouseListener interface
        // only reacting to mouse clicks

        // pre: X = e.getX(), Y = e.getY()
        // post: selected = the index of the first polygon in polygonList
        //                  containing point (X,Y), if such a polygon exists;
        //                  -1, otherwise
        public void mouseClicked(MouseEvent e) {
//            selected = findFirstPolygon(e.getX(), e.getY());

            updateViews();
        }

        public void mousePressed(MouseEvent e) { }
        public void mouseReleased(MouseEvent e) { }
        public void mouseEntered(MouseEvent e) { }
        public void mouseExited(MouseEvent e) { }
    }


    // additional fields and components-----------------------------------------
    private ArrayList<IPolygon> polygonList;
    private DrawingPanel drawingPanel;
    private Random random;


    // manually added methods
    // initialize and place all added components
    private void initAddedComponents() {
        drawingPanel = new DrawingPanel();
        drawingPanel.setSize(displayPanel.getWidth(), displayPanel.getHeight());  
        displayPanel.add(drawingPanel);
        
        random = new Random();
        polygonList = new ArrayList<IPolygon>();
//        selected = random.nextInt(polygonList.size());

        model = new Puzzle();

    }

    // adapt displayed information to the current state
    // of fields polygonList and selected
    private void updateViews() {
        drawingPanel.repaint();
    }



    // draw a polygon using only the information accesible through
    // the IPolygon interface
    private void drawPolygon(Graphics g, IPolygon polygon,
                              Color bc, Color fc, String text) {
        int[] x = polygon.getXPoints();
        int[] y = polygon.getYPoints();
        int n = polygon.getNPoints();

        g.setColor(fc);
        g.fillPolygon(x, y, n);

        g.setColor(bc);
        g.drawPolygon(x, y, n);
        g.drawString(text, polygon.getXCenter(), polygon.getYCenter());
    }

    // pre: -
    // return: index of the first polygon in polygonList containing point (x,y)
    //         -1 if such a polygon does not exist
    private int findFirstPolygon(int x, int y) {
        int r = -1;
        for (int i = 0; i < polygonList.size(); i++){
            IPolygon polygon = polygonList.get(i);
            if ( (polygon != null) && polygon.containsPoint(x, y) ) {
                r = i;
                break;
            }
        }
        return r;
    }

    // shuffle (reorder) the content of polygonList
    // by randomly swapping elements
    private void shufflePolygonList() {
        // TODO
    }
}
